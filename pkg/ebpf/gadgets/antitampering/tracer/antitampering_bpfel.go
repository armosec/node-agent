// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type antitamperingEvent struct {
	Timestamp  uint64
	MntnsId    uint64
	Pid        uint32
	Ppid       uint32
	Uid        uint32
	Gid        uint32
	UpperLayer bool
	Comm       [16]uint8
	Exepath    [4096]uint8
	MapName    [4096]uint8
	_          [7]byte
}

// loadAntitampering returns the embedded CollectionSpec for antitampering.
func loadAntitampering() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AntitamperingBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load antitampering: %w", err)
	}

	return spec, err
}

// loadAntitamperingObjects loads antitampering and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*antitamperingObjects
//	*antitamperingPrograms
//	*antitamperingMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAntitamperingObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAntitampering()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// antitamperingSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type antitamperingSpecs struct {
	antitamperingProgramSpecs
	antitamperingMapSpecs
}

// antitamperingSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type antitamperingProgramSpecs struct {
	TraceTampering *ebpf.ProgramSpec `ebpf:"trace_tampering"`
}

// antitamperingMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type antitamperingMapSpecs struct {
	AllowedPids          *ebpf.MapSpec `ebpf:"allowed_pids"`
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
	RestrictedMapsNames  *ebpf.MapSpec `ebpf:"restricted_maps_names"`
}

// antitamperingObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAntitamperingObjects or ebpf.CollectionSpec.LoadAndAssign.
type antitamperingObjects struct {
	antitamperingPrograms
	antitamperingMaps
}

func (o *antitamperingObjects) Close() error {
	return _AntitamperingClose(
		&o.antitamperingPrograms,
		&o.antitamperingMaps,
	)
}

// antitamperingMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAntitamperingObjects or ebpf.CollectionSpec.LoadAndAssign.
type antitamperingMaps struct {
	AllowedPids          *ebpf.Map `ebpf:"allowed_pids"`
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
	RestrictedMapsNames  *ebpf.Map `ebpf:"restricted_maps_names"`
}

func (m *antitamperingMaps) Close() error {
	return _AntitamperingClose(
		m.AllowedPids,
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
		m.RestrictedMapsNames,
	)
}

// antitamperingPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAntitamperingObjects or ebpf.CollectionSpec.LoadAndAssign.
type antitamperingPrograms struct {
	TraceTampering *ebpf.Program `ebpf:"trace_tampering"`
}

func (p *antitamperingPrograms) Close() error {
	return _AntitamperingClose(
		p.TraceTampering,
	)
}

func _AntitamperingClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed antitampering_bpfel.o
var _AntitamperingBytes []byte
