name: pr-merged
on:
  pull_request_target:
    inputs:
      REQUIRED_TESTS:
        required: true
        type: string
        description: 'tests to run'  

    types: [closed]
    branches: 
    - 'main'
    - 'master'
    paths-ignore:
      - '*.md' 
      - '*.yaml'
      # - '.github/workflows/*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    if: ${{ (github.event.pull_request.merged == true) && (github.repository_owner == 'kubescape') }} ## Skip if not merged and the repository owner is not kubescape
    runs-on: ubuntu-latest
    outputs:
      TEST_NAMES: ${{ steps.export_tests_to_env.outputs.TEST_NAMES }}

    permissions:
      id-token: write
      packages: write
      contents: read    
      pull-requests: read  

    steps:
 
      - uses: actions/checkout@v3
        name: Checkout
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v3
        name: Installing go
        with:
          go-version: "1.19"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
 
      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAYIO_REGISTRY_USERNAME }}
          password: ${{ secrets.QUAYIO_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: build/Dockerfile
          tags: quay.io/${{ github.repository_owner }}/sniffer:v0.1.${{ github.run_number }}-relevancy
          build-args: image_version=v0.1.${{ github.run_number }}-relevancy
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - id: export_tests_to_env
          name: set test name
          run: |
            echo "TEST_NAMES=$input" >> $GITHUB_OUTPUT
          env:
            input: ${{ inputs.REQUIRED_TESTS }}

  run-tests:
    strategy:
      fail-fast: false    
      matrix:
        TEST: ${{ fromJson(needs.docker-build.outputs.TEST_NAMES) }}
    needs: docker-build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout systests repo
        uses: actions/checkout@v3
        with:
          repository: armosec/system-tests
          path: .

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.13'
          cache: 'pip' 

      - name: create env
        run: ./create_env.sh

      - name: Generate uuid
        id: uuid
        run: |
          echo "RANDOM_UUID=systets-$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Create k8s Kind Cluster
        id: kind-cluster-install
        uses: helm/kind-action@v1.3.0
        with:
          cluster_name: ${{ steps.uuid.outputs.RANDOM_UUID }}
          # kubectl_version: v1.23.12
          # verbosity:

      - name: run-tests
        env:
          CUSTOMER: ${{ secrets.CUSTOMER }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID_PROD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          echo "Test history:"
          echo " ${{ matrix.TEST }} " >/tmp/testhistory
          cat /tmp/testhistory
          source systests_python_env/bin/activate

          python3 systest-cli.py             \
            -t ${{ matrix.TEST }}            \
            -b production                    \
            -c CyberArmorTests               \
            --logger DEBUG                   \
            --kwargs helm_branch=relevancy helm_repo=labs/kubescape-relevancy \
            ${{ inputs.COMPONENT_NAME }}-tag=${{ needs.docker-build.outputs.IMAGE_TAG_PRERELEASE }}

          deactivate

      - name: Test Report
        uses: mikepenz/action-junit-report@v3.6.1
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/results_xml_format/**.xml' 