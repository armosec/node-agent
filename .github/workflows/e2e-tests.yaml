name: e2e-tests
on:
  workflow_call:
    inputs:
      REQUIRED_TESTS:
        required: true
        type: string

jobs:
  wf-preparation:
    name: secret-validator
    runs-on: ubuntu-latest
    outputs:
      TEST_NAMES: ${{ steps.export_tests_to_env.outputs.TEST_NAMES }}
      is-secret-set: ${{ steps.check-secret-set.outputs.is-secret-set }}
    steps:
      - name: check if the necessary secrets are set in github secrets
        id: check-secret-set
        env:
          CUSTOMER: ${{ secrets.CUSTOMER }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID_PROD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: "echo \"is-secret-set=${{ env.CUSTOMER != '' && \n                        env.USERNAME != '' &&\n                        env.PASSWORD != '' &&\n                        env.CLIENT_ID != '' &&\n                        env.SECRET_KEY != '' &&\n                        env.REGISTRY_USERNAME != '' &&\n                        env.REGISTRY_PASSWORD != ''\n                      }}\" >> $GITHUB_OUTPUT\n"

      - id: export_tests_to_env
        name: set test name
        run: |
          echo "TEST_NAMES=$input" >> $GITHUB_OUTPUT
        env:
          input: ${{ inputs.REQUIRED_TESTS }}
        
  run-tests:
    strategy:
      fail-fast: false
      matrix:
        TEST: ${{ fromJson(needs.wf-preparation.outputs.TEST_NAMES) }}
    needs: [wf-preparation]
    if: ${{ (needs.wf-preparation.outputs.is-secret-set == 'true') && (always() && (contains(needs.*.result, 'success') || contains(needs.*.result, 'skipped')) && !(contains(needs.*.result, 'failure')) && !(contains(needs.*.result, 'cancelled'))) }}
    runs-on: ubuntu-latest # This cannot change
    steps:
      - name: Checkout kernel version and release
        run: uname -a

      - name: Checkout linux distro
        run: cat /etc/os-release
      
      - name: run falco init container
        run: docker run -i -v /etc:/host/etc -v /boot:/host/boot -v /lib/modules:/host/lib/modules -v /usr:/host/usr  -e FALCO_BPF_PROBE=1  docker.io/falcosecurity/falco-driver-loader:0.32.2 > container-logs.txt

      - name: print logs
        run: cat container-logs.txt

      # - name: Checkout systests repo
      #   uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
      #   with:
      #     repository: armosec/system-tests
      #     ref: relevancy
      #     path: .

      # - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # ratchet:actions/setup-python@v4
      #   with:
      #     python-version: '3.8.13'
      #     cache: 'pip'

      # - name: create env
      #   run: ./create_env.sh

      # - name: Generate uuid
      #   id: uuid
      #   run: |
      #     echo "RANDOM_UUID=$(uuidgen)" >> $GITHUB_OUTPUT

      # - name: Create k8s Kind Cluster
      #   id: kind-cluster-install
      #   uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d # ratchet:helm/kind-action@v1.3.0
      #   with:
      #     cluster_name: ${{ steps.uuid.outputs.RANDOM_UUID }}

      # - name: run-tests-on-local-built-kubescape
      #   env:
      #     CUSTOMER: ${{ secrets.CUSTOMER }}
      #     USERNAME: ${{ secrets.USERNAME }}
      #     PASSWORD: ${{ secrets.PASSWORD }}
      #     CLIENT_ID: ${{ secrets.CLIENT_ID_PROD }}
      #     SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }}
      #     REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      #     REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      #   run: |
      #     echo "Test history:"
      #     echo " ${{ matrix.TEST }} " >/tmp/testhistory
      #     cat /tmp/testhistory
      #     source systests_python_env/bin/activate

      #     python3 systest-cli.py             \
      #       -t ${{ matrix.TEST }}            \
      #       -b production                    \
      #       -c CyberArmorTests               \
      #       --logger DEBUG                   \
      #       --kwargs helm_branch=relevancy helm_repo=labs/kubescape-relevancy

      #     deactivate

      # - name: Test Report
      #   uses: mikepenz/action-junit-report@6e9933f4a97f4d2b99acef4d7b97924466037882 # ratchet:mikepenz/action-junit-report@v3.6.1
      #   if: always() # always run even if the previous step fails
      #   with:
      #     report_paths: '**/results_xml_format/**.xml'
      #     commit: ${{github.event.workflow_run.head_sha}}
